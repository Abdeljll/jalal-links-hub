import React, { createContext, useContext, useState, ReactNode } from 'react';

type Language = 'fr' | 'en';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

const translations = {
  fr: {
    // Header
    'header.available': 'Disponible pour de nouvelles opportunitÃ©s',
    'header.name': 'ABDELAZIZ JALAL',
    'header.title': 'DÃ©veloppeur Full Stack',
    'header.education': 'ðŸŽ“ DiplÃ´mÃ© en Informatique et GÃ©nie Logiciel',
    'header.location': 'MontrÃ©al, QC',
    
    // Scrolling text
    'skills.fullstack': 'ðŸš€ Full Stack Developer',
    'skills.react': 'ðŸ’» React Expert',
    'skills.typescript': 'ðŸŽ¯ TypeScript Ninja',
    'skills.nodejs': 'ðŸ”¥ Node.js Master',
    'skills.uiux': 'âœ¨ UI/UX Designer',
    'skills.performance': 'âš¡ Performance Optimizer',
    'skills.creative': 'ðŸŽ¨ Creative Coder',
    'skills.solver': 'ðŸŒŸ Problem Solver',
    
    // Portfolio section
    'portfolio.title': 'Mes Portfolios',
    'portfolio.description': 'DÃ©couvrez mes diffÃ©rentes versions de portfolio, chacune reflÃ©tant mon Ã©volution en tant que dÃ©veloppeur crÃ©atif.',
    'portfolio.v2.title': 'Portfolio V2',
    'portfolio.v2.description': 'Site portfolio moderne avec design Ã©purÃ©, prÃ©sentant mes projets, compÃ©tences et expÃ©riences en dÃ©veloppement logiciel. Interface responsive avec navigation intuitive. (EntiÃ¨rement en anglais)',
    'portfolio.v1.title': 'Portfolio V1',
    'portfolio.v1.description': 'PremiÃ¨re version de mon portfolio personnel crÃ©Ã©e avec Gatsby. Design hexagonal distinctif avec animations Ã©lÃ©gantes pour prÃ©senter mon parcours professionnel. (EntiÃ¨rement en franÃ§ais)',
    'portfolio.visit': 'Visiter le site',
    
    // Footer
    'footer.rights': 'Tous droits rÃ©servÃ©s.',
    
    // Language
    'language.french': 'FranÃ§ais',
    'language.english': 'English'
  },
  en: {
    // Header
    'header.available': 'Available for new opportunities',
    'header.name': 'ABDELAZIZ JALAL',
    'header.title': 'Full Stack Developer',
    'header.education': 'ðŸŽ“ Computer Science & Software Engineering Graduate',
    'header.location': 'Montreal, QC',
    
    // Scrolling text
    'skills.fullstack': 'ðŸš€ Full Stack Developer',
    'skills.react': 'ðŸ’» React Expert',
    'skills.typescript': 'ðŸŽ¯ TypeScript Ninja',
    'skills.nodejs': 'ðŸ”¥ Node.js Master',
    'skills.uiux': 'âœ¨ UI/UX Designer',
    'skills.performance': 'âš¡ Performance Optimizer',
    'skills.creative': 'ðŸŽ¨ Creative Coder',
    'skills.solver': 'ðŸŒŸ Problem Solver',
    
    // Portfolio section
    'portfolio.title': 'My Portfolios',
    'portfolio.description': 'Discover my different portfolio versions, each reflecting my evolution as a creative developer.',
    'portfolio.v2.title': 'Portfolio V2',
    'portfolio.v2.description': 'Modern portfolio website with clean design, showcasing my projects, skills and software development experience. Responsive interface with intuitive navigation. (Entirely in English)',
    'portfolio.v1.title': 'Portfolio V1',
    'portfolio.v1.description': 'First version of my personal portfolio created with Gatsby. Distinctive hexagonal design with elegant animations to present my professional journey. (Entirely in French)',
    'portfolio.visit': 'Visit website',
    
    // Footer
    'footer.rights': 'All rights reserved.',
    
    // Language
    'language.french': 'FranÃ§ais',
    'language.english': 'English'
  }
};

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('fr');

  const t = (key: string): string => {
    return translations[language][key as keyof typeof translations[typeof language]] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};